// Combi4.h  
#pragma once 
namespace combi4
{
	struct  xcombination // генератор  сочетаний (эвристика) 
	{
		short  n,        // кол-во элементов исходного множества  
			m,        // количество элементов в сочетаниях 
			* sset;   // массив индексов текущего сочетания  
		xcombination(
			short n = 1, //количество элементов исходного множества  
			short m = 1  // количество элементов в сочетаниях
		);
		void reset();        // сбросить генератор, начать сначала 
		short getfirst();    // сформ. первый массив индексов    
		short getnext();     // сформ. следующий массив индексов  
		short ntx(short i);  // получить i-й эл-т массива индексов  
		unsigned __int64 nc; // номер сочетания  0,..., count()-1   
		unsigned __int64 count() const;  // вычислить кол-во сочетаний      
	};
	struct  permutation      // генератор   перестановок     
	{
		const static bool L = true;  // левая стрелка 
		const static bool R = false; // правая стрелка   
		short  n,         // количество элементов исходного множества 
			* sset;    // массив индексов текущей перестановки
		bool* dart;       // массив  стрелок (левых-L и правых-R) 
		permutation(short n = 1); // конструктор (кол-во эл-ов исх. мн-ва) 
		void reset();             // сбросить генератор, начать сначала 
		__int64 getfirst();       // сформ. первый массив индексов    
		__int64 getnext();        // сформ. случайный массив индексов  
		short ntx(short i);       // получить i-й элемент масива индексов 
		unsigned __int64 np;      // номер перествновки 0,... count()-1 
		unsigned __int64 count() const;  // вычислить общее кол. перестановок    
	};
	struct  accomodation  // генератор размещений 
	{
		short  n,         // количество элементов исходного множества  
			m,         // количество элементов в размещении 
			* sset;    // массив индесов текущего размещения  
		xcombination* cgen;   // указатель на генератор сочетаний
		permutation* pgen;    // указатель на генератор перестановок
		accomodation(short n = 1, short m = 1);  // конструктор  
		void reset();         // сбросить генератор, начать сначала 
		short getfirst();     // сформировать первый массив индексов   
		short getnext();      // сформировать следующий массив индексов  
		short ntx(short i);   // получить i-й элемент массива индексов  
		unsigned __int64 na;  // номер размещения 0, ..., count()-1 
		unsigned __int64 count() const;  // общее количество размещений 
	};
}