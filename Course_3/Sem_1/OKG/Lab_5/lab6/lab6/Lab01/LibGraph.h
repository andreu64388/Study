#ifndef LIBGRAPH
#define LIBGRAPH 1
const double pi = 3.14159;
typedef double(*pfunc2)(double, double);	// Указатель на функцию

struct CSizeD
{
	double cx;
	double cy;
};
//-----------------------------------------------------------------------------------
struct CRectD
{
	double left;
	double top;
	double right;
	double bottom;
	CRectD() { left = top = right = bottom = 0; };
	CRectD(double l, double t, double r, double b);
	void SetRectD(double l, double t, double r, double b);
	CSizeD SizeD();
};

//------------------------------------------------------------------------------------

CMatrix SpaceToWindow(CRectD& rs, CRect& rw);
// Возвращает матрицу пересчета координат из мировых в оконные
// rs - область в мировых координатах - double
// rw - область в оконных координатах - int
//-----------------------------------------------------------------------------------
void SetMyMode(CDC& dc, CRect& RS, CRect& RW);  //MFC
// Устанавливает режим отображения MM_ANISOTROPIC и его параметры
// dc - ссылка на класс CDC MFC
// RS -  область в мировых координатах - int
// RW -	 Область в оконных координатах - int  
//---------------------------------------------------------------------------------
CMatrix CreateTranslate2D(double dx, double dy);
// Формирует матрицу для преобразования координат объекта при его смещении 
// на dx по оси X и на dy по оси Y в фиксированной системе координат
// --- ИЛИ ---
// Формирует матрицу для преобразования координат объекта при смещении начала
// системы координат на -dx оси X и на -dy по оси Y при фиксированном положении объекта 
//----------------------------------------------------------------------------------
CMatrix CreateTranslate3D(double dx, double dy, double dz);
// Формирует матрицу для преобразования координат объекта при его смещении 
// на dx по оси X, на dy по оси Y,на dz по оси Z в фиксированной системе координат
// --- ИЛИ ---
// Формирует матрицу для преобразования координат объекта при смещении начала
// системы координат на -dx оси X,на -dy по оси Y, на -dz по оси Z 
// при фиксированном положении объекта 
//---------------------------------------------------------------------------------
CMatrix CreateRotate2D(double fi);
// Формирует матрицу для преобразования координат объекта при его повороте
// на угол fi (при fi>0 против часовой стрелки)в фиксированной системе координат
// --- ИЛИ ---
// Формирует матрицу для преобразования координат объекта при повороте начала
// системы координат на угол -fi при фиксированном положении объекта 
// fi - угол в градусах

//--------------------------------------------------------------------------------
CMatrix CreateRotate3DZ(double fi);
// Формирует матрицу для преобразования координат объекта при его повороте вокруг оси Z
// на угол fi (при fi>0 против часовой стрелки)в фиксированной системе координат
// --- ИЛИ ---
// Формирует матрицу для преобразования координат объекта при повороте начала
// системы координат вокруг оси Z на угол -fi при фиксированном положении объекта 
// fi - угол в градусах

//--------------------------------------------------------------------------------
CMatrix CreateRotate3DX(double fi);
// Формирует матрицу для преобразования координат объекта при его повороте вокруг оси X
// на угол fi (при fi>0 против часовой стрелки)в фиксированной системе координат
// --- ИЛИ ---
// Формирует матрицу для преобразования координат объекта при повороте начала
// системы координат вокруг оси X на угол -fi при фиксированном положении объекта 
// fi - угол в градусах
//--------------------------------------------------------------------------------
CMatrix CreateRotate3DY(double fi);
// Формирует матрицу для преобразования координат объекта при его повороте вокруг оси Y
// на угол fi (при fi>0 против часовой стрелки)в фиксированной системе координат
// --- ИЛИ ---
// Формирует матрицу для преобразования координат объекта при повороте начала
// системы координат вокруг оси Y на угол -fi при фиксированном положении объекта 
// fi - угол в градусах

//--------------------------------------------------------------------------------
CMatrix CreateViewCoord(double r, double fi, double q);
// Создает матрицу пересчета точки из мировой системы координат в видовую
// (r,fi,q)- координата ТОЧКИ НАБЛЮДЕНИЯ(начало видовой системы координат)
// в мировой сферической системе координат( углы fi и q в градусах)
//-------------------------------------------------------------------------------
CMatrix VectorMult(CMatrix& V1, CMatrix& V2);
// Вычисляет векторное произведение векторов V1 и V2
//-------------------------------------------------------------------------------
double ScalarMult(CMatrix& V1, CMatrix& V2);
// Вычисляет скалярное произведение векторов V1 и V2
//-------------------------------------------------------------------------------
double ModVec(CMatrix& V);
// Вычисляет модуль вектора V
//------------------------------------------------------------------------------
double CosV1V2(CMatrix& V1, CMatrix& V2);
// Вычисляет КОСИНУС угла между векторами V1 и V2
//-----------------------------------------------------------------------------
double AngleV1V2(CMatrix& V1, CMatrix& V2);
// Вычисляет угол между векторами V1 и V2 в градусах
//-----------------------------------------------------------------------------------
CMatrix SphereToCart(CMatrix& PView);
// Преобразует сферические координаты PView  точки в декартовы
// PView(0) - r
// PView(1) - fi - азимут(отсчет от оси X), град.
// PView(2) - q - угол(отсчетот оси Z), град.
// Результат: R(0)- x, R(1)- y, R(2)- z	
//-----------------------------------------------------------------------------------
void GetProjection(CRectD& RS, CMatrix& Data, CMatrix& PView, CRectD& PR);
// Вычисляет координаты проекции охватывающего фигуру паралелепипеда на 
// плоскость XY в ВИДОВОЙ системе координат
// Data - матрица данных
// RS - область на плоскости XY, на которую опирается отображаемая поверхность
// PView - координаты точки наблюдения в мировой сферической системе координат
// PR - проекция
//-----------------------------------------------------------------------------------

#endif

