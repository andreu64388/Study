
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Pizzas
 * 
 */
export type Pizzas = $Result.DefaultSelection<Prisma.$PizzasPayload>
/**
 * Model Weapons
 * 
 */
export type Weapons = $Result.DefaultSelection<Prisma.$WeaponsPayload>
/**
 * Model Turtles
 * 
 */
export type Turtles = $Result.DefaultSelection<Prisma.$TurtlesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pizzas
 * const pizzas = await prisma.pizzas.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pizzas
   * const pizzas = await prisma.pizzas.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.pizzas`: Exposes CRUD operations for the **Pizzas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pizzas
    * const pizzas = await prisma.pizzas.findMany()
    * ```
    */
  get pizzas(): Prisma.PizzasDelegate<ExtArgs>;

  /**
   * `prisma.weapons`: Exposes CRUD operations for the **Weapons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Weapons
    * const weapons = await prisma.weapons.findMany()
    * ```
    */
  get weapons(): Prisma.WeaponsDelegate<ExtArgs>;

  /**
   * `prisma.turtles`: Exposes CRUD operations for the **Turtles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turtles
    * const turtles = await prisma.turtles.findMany()
    * ```
    */
  get turtles(): Prisma.TurtlesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.10.2
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Pizzas: 'Pizzas',
    Weapons: 'Weapons',
    Turtles: 'Turtles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'pizzas' | 'weapons' | 'turtles'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Pizzas: {
        payload: Prisma.$PizzasPayload<ExtArgs>
        fields: Prisma.PizzasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PizzasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PizzasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>
          }
          findFirst: {
            args: Prisma.PizzasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PizzasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>
          }
          findMany: {
            args: Prisma.PizzasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>[]
          }
          create: {
            args: Prisma.PizzasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>
          }
          createMany: {
            args: Prisma.PizzasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PizzasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>
          }
          update: {
            args: Prisma.PizzasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>
          }
          deleteMany: {
            args: Prisma.PizzasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PizzasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PizzasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PizzasPayload>
          }
          aggregate: {
            args: Prisma.PizzasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePizzas>
          }
          groupBy: {
            args: Prisma.PizzasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PizzasGroupByOutputType>[]
          }
          count: {
            args: Prisma.PizzasCountArgs<ExtArgs>,
            result: $Utils.Optional<PizzasCountAggregateOutputType> | number
          }
        }
      }
      Weapons: {
        payload: Prisma.$WeaponsPayload<ExtArgs>
        fields: Prisma.WeaponsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeaponsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeaponsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          findFirst: {
            args: Prisma.WeaponsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeaponsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          findMany: {
            args: Prisma.WeaponsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>[]
          }
          create: {
            args: Prisma.WeaponsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          createMany: {
            args: Prisma.WeaponsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WeaponsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          update: {
            args: Prisma.WeaponsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          deleteMany: {
            args: Prisma.WeaponsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeaponsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeaponsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeaponsPayload>
          }
          aggregate: {
            args: Prisma.WeaponsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeapons>
          }
          groupBy: {
            args: Prisma.WeaponsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeaponsGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeaponsCountArgs<ExtArgs>,
            result: $Utils.Optional<WeaponsCountAggregateOutputType> | number
          }
        }
      }
      Turtles: {
        payload: Prisma.$TurtlesPayload<ExtArgs>
        fields: Prisma.TurtlesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurtlesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurtlesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>
          }
          findFirst: {
            args: Prisma.TurtlesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurtlesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>
          }
          findMany: {
            args: Prisma.TurtlesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>[]
          }
          create: {
            args: Prisma.TurtlesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>
          }
          createMany: {
            args: Prisma.TurtlesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TurtlesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>
          }
          update: {
            args: Prisma.TurtlesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>
          }
          deleteMany: {
            args: Prisma.TurtlesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TurtlesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TurtlesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TurtlesPayload>
          }
          aggregate: {
            args: Prisma.TurtlesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTurtles>
          }
          groupBy: {
            args: Prisma.TurtlesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TurtlesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurtlesCountArgs<ExtArgs>,
            result: $Utils.Optional<TurtlesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PizzasCountOutputType
   */

  export type PizzasCountOutputType = {
    Turtles: number
  }

  export type PizzasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Turtles?: boolean | PizzasCountOutputTypeCountTurtlesArgs
  }

  // Custom InputTypes

  /**
   * PizzasCountOutputType without action
   */
  export type PizzasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PizzasCountOutputType
     */
    select?: PizzasCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PizzasCountOutputType without action
   */
  export type PizzasCountOutputTypeCountTurtlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurtlesWhereInput
  }



  /**
   * Count Type WeaponsCountOutputType
   */

  export type WeaponsCountOutputType = {
    Turtles: number
  }

  export type WeaponsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Turtles?: boolean | WeaponsCountOutputTypeCountTurtlesArgs
  }

  // Custom InputTypes

  /**
   * WeaponsCountOutputType without action
   */
  export type WeaponsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeaponsCountOutputType
     */
    select?: WeaponsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WeaponsCountOutputType without action
   */
  export type WeaponsCountOutputTypeCountTurtlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurtlesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Pizzas
   */

  export type AggregatePizzas = {
    _count: PizzasCountAggregateOutputType | null
    _avg: PizzasAvgAggregateOutputType | null
    _sum: PizzasSumAggregateOutputType | null
    _min: PizzasMinAggregateOutputType | null
    _max: PizzasMaxAggregateOutputType | null
  }

  export type PizzasAvgAggregateOutputType = {
    id: number | null
    calories: number | null
  }

  export type PizzasSumAggregateOutputType = {
    id: number | null
    calories: number | null
  }

  export type PizzasMinAggregateOutputType = {
    id: number | null
    name: string | null
    calories: number | null
    description: string | null
  }

  export type PizzasMaxAggregateOutputType = {
    id: number | null
    name: string | null
    calories: number | null
    description: string | null
  }

  export type PizzasCountAggregateOutputType = {
    id: number
    name: number
    calories: number
    description: number
    _all: number
  }


  export type PizzasAvgAggregateInputType = {
    id?: true
    calories?: true
  }

  export type PizzasSumAggregateInputType = {
    id?: true
    calories?: true
  }

  export type PizzasMinAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    description?: true
  }

  export type PizzasMaxAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    description?: true
  }

  export type PizzasCountAggregateInputType = {
    id?: true
    name?: true
    calories?: true
    description?: true
    _all?: true
  }

  export type PizzasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pizzas to aggregate.
     */
    where?: PizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzasOrderByWithRelationInput | PizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pizzas
    **/
    _count?: true | PizzasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PizzasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PizzasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PizzasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PizzasMaxAggregateInputType
  }

  export type GetPizzasAggregateType<T extends PizzasAggregateArgs> = {
        [P in keyof T & keyof AggregatePizzas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePizzas[P]>
      : GetScalarType<T[P], AggregatePizzas[P]>
  }




  export type PizzasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PizzasWhereInput
    orderBy?: PizzasOrderByWithAggregationInput | PizzasOrderByWithAggregationInput[]
    by: PizzasScalarFieldEnum[] | PizzasScalarFieldEnum
    having?: PizzasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PizzasCountAggregateInputType | true
    _avg?: PizzasAvgAggregateInputType
    _sum?: PizzasSumAggregateInputType
    _min?: PizzasMinAggregateInputType
    _max?: PizzasMaxAggregateInputType
  }

  export type PizzasGroupByOutputType = {
    id: number
    name: string
    calories: number
    description: string | null
    _count: PizzasCountAggregateOutputType | null
    _avg: PizzasAvgAggregateOutputType | null
    _sum: PizzasSumAggregateOutputType | null
    _min: PizzasMinAggregateOutputType | null
    _max: PizzasMaxAggregateOutputType | null
  }

  type GetPizzasGroupByPayload<T extends PizzasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PizzasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PizzasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PizzasGroupByOutputType[P]>
            : GetScalarType<T[P], PizzasGroupByOutputType[P]>
        }
      >
    >


  export type PizzasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    calories?: boolean
    description?: boolean
    Turtles?: boolean | Pizzas$TurtlesArgs<ExtArgs>
    _count?: boolean | PizzasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pizzas"]>

  export type PizzasSelectScalar = {
    id?: boolean
    name?: boolean
    calories?: boolean
    description?: boolean
  }

  export type PizzasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Turtles?: boolean | Pizzas$TurtlesArgs<ExtArgs>
    _count?: boolean | PizzasCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PizzasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pizzas"
    objects: {
      Turtles: Prisma.$TurtlesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      calories: number
      description: string | null
    }, ExtArgs["result"]["pizzas"]>
    composites: {}
  }


  type PizzasGetPayload<S extends boolean | null | undefined | PizzasDefaultArgs> = $Result.GetResult<Prisma.$PizzasPayload, S>

  type PizzasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PizzasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PizzasCountAggregateInputType | true
    }

  export interface PizzasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pizzas'], meta: { name: 'Pizzas' } }
    /**
     * Find zero or one Pizzas that matches the filter.
     * @param {PizzasFindUniqueArgs} args - Arguments to find a Pizzas
     * @example
     * // Get one Pizzas
     * const pizzas = await prisma.pizzas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PizzasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PizzasFindUniqueArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pizzas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PizzasFindUniqueOrThrowArgs} args - Arguments to find a Pizzas
     * @example
     * // Get one Pizzas
     * const pizzas = await prisma.pizzas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PizzasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PizzasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pizzas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasFindFirstArgs} args - Arguments to find a Pizzas
     * @example
     * // Get one Pizzas
     * const pizzas = await prisma.pizzas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PizzasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PizzasFindFirstArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pizzas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasFindFirstOrThrowArgs} args - Arguments to find a Pizzas
     * @example
     * // Get one Pizzas
     * const pizzas = await prisma.pizzas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PizzasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PizzasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pizzas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pizzas
     * const pizzas = await prisma.pizzas.findMany()
     * 
     * // Get first 10 Pizzas
     * const pizzas = await prisma.pizzas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pizzasWithIdOnly = await prisma.pizzas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PizzasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PizzasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pizzas.
     * @param {PizzasCreateArgs} args - Arguments to create a Pizzas.
     * @example
     * // Create one Pizzas
     * const Pizzas = await prisma.pizzas.create({
     *   data: {
     *     // ... data to create a Pizzas
     *   }
     * })
     * 
    **/
    create<T extends PizzasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PizzasCreateArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pizzas.
     *     @param {PizzasCreateManyArgs} args - Arguments to create many Pizzas.
     *     @example
     *     // Create many Pizzas
     *     const pizzas = await prisma.pizzas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PizzasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PizzasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pizzas.
     * @param {PizzasDeleteArgs} args - Arguments to delete one Pizzas.
     * @example
     * // Delete one Pizzas
     * const Pizzas = await prisma.pizzas.delete({
     *   where: {
     *     // ... filter to delete one Pizzas
     *   }
     * })
     * 
    **/
    delete<T extends PizzasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PizzasDeleteArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pizzas.
     * @param {PizzasUpdateArgs} args - Arguments to update one Pizzas.
     * @example
     * // Update one Pizzas
     * const pizzas = await prisma.pizzas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PizzasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PizzasUpdateArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pizzas.
     * @param {PizzasDeleteManyArgs} args - Arguments to filter Pizzas to delete.
     * @example
     * // Delete a few Pizzas
     * const { count } = await prisma.pizzas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PizzasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PizzasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pizzas
     * const pizzas = await prisma.pizzas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PizzasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PizzasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pizzas.
     * @param {PizzasUpsertArgs} args - Arguments to update or create a Pizzas.
     * @example
     * // Update or create a Pizzas
     * const pizzas = await prisma.pizzas.upsert({
     *   create: {
     *     // ... data to create a Pizzas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pizzas we want to update
     *   }
     * })
    **/
    upsert<T extends PizzasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PizzasUpsertArgs<ExtArgs>>
    ): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasCountArgs} args - Arguments to filter Pizzas to count.
     * @example
     * // Count the number of Pizzas
     * const count = await prisma.pizzas.count({
     *   where: {
     *     // ... the filter for the Pizzas we want to count
     *   }
     * })
    **/
    count<T extends PizzasCountArgs>(
      args?: Subset<T, PizzasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PizzasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PizzasAggregateArgs>(args: Subset<T, PizzasAggregateArgs>): Prisma.PrismaPromise<GetPizzasAggregateType<T>>

    /**
     * Group by Pizzas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PizzasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PizzasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PizzasGroupByArgs['orderBy'] }
        : { orderBy?: PizzasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PizzasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPizzasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pizzas model
   */
  readonly fields: PizzasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pizzas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PizzasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Turtles<T extends Pizzas$TurtlesArgs<ExtArgs> = {}>(args?: Subset<T, Pizzas$TurtlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pizzas model
   */ 
  interface PizzasFieldRefs {
    readonly id: FieldRef<"Pizzas", 'Int'>
    readonly name: FieldRef<"Pizzas", 'String'>
    readonly calories: FieldRef<"Pizzas", 'Int'>
    readonly description: FieldRef<"Pizzas", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Pizzas findUnique
   */
  export type PizzasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * Filter, which Pizzas to fetch.
     */
    where: PizzasWhereUniqueInput
  }


  /**
   * Pizzas findUniqueOrThrow
   */
  export type PizzasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * Filter, which Pizzas to fetch.
     */
    where: PizzasWhereUniqueInput
  }


  /**
   * Pizzas findFirst
   */
  export type PizzasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * Filter, which Pizzas to fetch.
     */
    where?: PizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzasOrderByWithRelationInput | PizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pizzas.
     */
    cursor?: PizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pizzas.
     */
    distinct?: PizzasScalarFieldEnum | PizzasScalarFieldEnum[]
  }


  /**
   * Pizzas findFirstOrThrow
   */
  export type PizzasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * Filter, which Pizzas to fetch.
     */
    where?: PizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzasOrderByWithRelationInput | PizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pizzas.
     */
    cursor?: PizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pizzas.
     */
    distinct?: PizzasScalarFieldEnum | PizzasScalarFieldEnum[]
  }


  /**
   * Pizzas findMany
   */
  export type PizzasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * Filter, which Pizzas to fetch.
     */
    where?: PizzasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pizzas to fetch.
     */
    orderBy?: PizzasOrderByWithRelationInput | PizzasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pizzas.
     */
    cursor?: PizzasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pizzas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pizzas.
     */
    skip?: number
    distinct?: PizzasScalarFieldEnum | PizzasScalarFieldEnum[]
  }


  /**
   * Pizzas create
   */
  export type PizzasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * The data needed to create a Pizzas.
     */
    data: XOR<PizzasCreateInput, PizzasUncheckedCreateInput>
  }


  /**
   * Pizzas createMany
   */
  export type PizzasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pizzas.
     */
    data: PizzasCreateManyInput | PizzasCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pizzas update
   */
  export type PizzasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * The data needed to update a Pizzas.
     */
    data: XOR<PizzasUpdateInput, PizzasUncheckedUpdateInput>
    /**
     * Choose, which Pizzas to update.
     */
    where: PizzasWhereUniqueInput
  }


  /**
   * Pizzas updateMany
   */
  export type PizzasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pizzas.
     */
    data: XOR<PizzasUpdateManyMutationInput, PizzasUncheckedUpdateManyInput>
    /**
     * Filter which Pizzas to update
     */
    where?: PizzasWhereInput
  }


  /**
   * Pizzas upsert
   */
  export type PizzasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * The filter to search for the Pizzas to update in case it exists.
     */
    where: PizzasWhereUniqueInput
    /**
     * In case the Pizzas found by the `where` argument doesn't exist, create a new Pizzas with this data.
     */
    create: XOR<PizzasCreateInput, PizzasUncheckedCreateInput>
    /**
     * In case the Pizzas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PizzasUpdateInput, PizzasUncheckedUpdateInput>
  }


  /**
   * Pizzas delete
   */
  export type PizzasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
    /**
     * Filter which Pizzas to delete.
     */
    where: PizzasWhereUniqueInput
  }


  /**
   * Pizzas deleteMany
   */
  export type PizzasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pizzas to delete
     */
    where?: PizzasWhereInput
  }


  /**
   * Pizzas.Turtles
   */
  export type Pizzas$TurtlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    where?: TurtlesWhereInput
    orderBy?: TurtlesOrderByWithRelationInput | TurtlesOrderByWithRelationInput[]
    cursor?: TurtlesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurtlesScalarFieldEnum | TurtlesScalarFieldEnum[]
  }


  /**
   * Pizzas without action
   */
  export type PizzasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pizzas
     */
    select?: PizzasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PizzasInclude<ExtArgs> | null
  }



  /**
   * Model Weapons
   */

  export type AggregateWeapons = {
    _count: WeaponsCountAggregateOutputType | null
    _avg: WeaponsAvgAggregateOutputType | null
    _sum: WeaponsSumAggregateOutputType | null
    _min: WeaponsMinAggregateOutputType | null
    _max: WeaponsMaxAggregateOutputType | null
  }

  export type WeaponsAvgAggregateOutputType = {
    id: number | null
    dps: number | null
  }

  export type WeaponsSumAggregateOutputType = {
    id: number | null
    dps: number | null
  }

  export type WeaponsMinAggregateOutputType = {
    id: number | null
    name: string | null
    dps: number | null
  }

  export type WeaponsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    dps: number | null
  }

  export type WeaponsCountAggregateOutputType = {
    id: number
    name: number
    dps: number
    _all: number
  }


  export type WeaponsAvgAggregateInputType = {
    id?: true
    dps?: true
  }

  export type WeaponsSumAggregateInputType = {
    id?: true
    dps?: true
  }

  export type WeaponsMinAggregateInputType = {
    id?: true
    name?: true
    dps?: true
  }

  export type WeaponsMaxAggregateInputType = {
    id?: true
    name?: true
    dps?: true
  }

  export type WeaponsCountAggregateInputType = {
    id?: true
    name?: true
    dps?: true
    _all?: true
  }

  export type WeaponsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weapons to aggregate.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Weapons
    **/
    _count?: true | WeaponsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeaponsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeaponsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeaponsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeaponsMaxAggregateInputType
  }

  export type GetWeaponsAggregateType<T extends WeaponsAggregateArgs> = {
        [P in keyof T & keyof AggregateWeapons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeapons[P]>
      : GetScalarType<T[P], AggregateWeapons[P]>
  }




  export type WeaponsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WeaponsWhereInput
    orderBy?: WeaponsOrderByWithAggregationInput | WeaponsOrderByWithAggregationInput[]
    by: WeaponsScalarFieldEnum[] | WeaponsScalarFieldEnum
    having?: WeaponsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeaponsCountAggregateInputType | true
    _avg?: WeaponsAvgAggregateInputType
    _sum?: WeaponsSumAggregateInputType
    _min?: WeaponsMinAggregateInputType
    _max?: WeaponsMaxAggregateInputType
  }

  export type WeaponsGroupByOutputType = {
    id: number
    name: string
    dps: number
    _count: WeaponsCountAggregateOutputType | null
    _avg: WeaponsAvgAggregateOutputType | null
    _sum: WeaponsSumAggregateOutputType | null
    _min: WeaponsMinAggregateOutputType | null
    _max: WeaponsMaxAggregateOutputType | null
  }

  type GetWeaponsGroupByPayload<T extends WeaponsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeaponsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeaponsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeaponsGroupByOutputType[P]>
            : GetScalarType<T[P], WeaponsGroupByOutputType[P]>
        }
      >
    >


  export type WeaponsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    dps?: boolean
    Turtles?: boolean | Weapons$TurtlesArgs<ExtArgs>
    _count?: boolean | WeaponsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weapons"]>

  export type WeaponsSelectScalar = {
    id?: boolean
    name?: boolean
    dps?: boolean
  }

  export type WeaponsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Turtles?: boolean | Weapons$TurtlesArgs<ExtArgs>
    _count?: boolean | WeaponsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $WeaponsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Weapons"
    objects: {
      Turtles: Prisma.$TurtlesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      dps: number
    }, ExtArgs["result"]["weapons"]>
    composites: {}
  }


  type WeaponsGetPayload<S extends boolean | null | undefined | WeaponsDefaultArgs> = $Result.GetResult<Prisma.$WeaponsPayload, S>

  type WeaponsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WeaponsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WeaponsCountAggregateInputType | true
    }

  export interface WeaponsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Weapons'], meta: { name: 'Weapons' } }
    /**
     * Find zero or one Weapons that matches the filter.
     * @param {WeaponsFindUniqueArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeaponsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsFindUniqueArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Weapons that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WeaponsFindUniqueOrThrowArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeaponsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Weapons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsFindFirstArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeaponsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindFirstArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Weapons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsFindFirstOrThrowArgs} args - Arguments to find a Weapons
     * @example
     * // Get one Weapons
     * const weapons = await prisma.weapons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeaponsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Weapons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Weapons
     * const weapons = await prisma.weapons.findMany()
     * 
     * // Get first 10 Weapons
     * const weapons = await prisma.weapons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weaponsWithIdOnly = await prisma.weapons.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeaponsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Weapons.
     * @param {WeaponsCreateArgs} args - Arguments to create a Weapons.
     * @example
     * // Create one Weapons
     * const Weapons = await prisma.weapons.create({
     *   data: {
     *     // ... data to create a Weapons
     *   }
     * })
     * 
    **/
    create<T extends WeaponsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsCreateArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Weapons.
     *     @param {WeaponsCreateManyArgs} args - Arguments to create many Weapons.
     *     @example
     *     // Create many Weapons
     *     const weapons = await prisma.weapons.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeaponsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Weapons.
     * @param {WeaponsDeleteArgs} args - Arguments to delete one Weapons.
     * @example
     * // Delete one Weapons
     * const Weapons = await prisma.weapons.delete({
     *   where: {
     *     // ... filter to delete one Weapons
     *   }
     * })
     * 
    **/
    delete<T extends WeaponsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsDeleteArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Weapons.
     * @param {WeaponsUpdateArgs} args - Arguments to update one Weapons.
     * @example
     * // Update one Weapons
     * const weapons = await prisma.weapons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeaponsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsUpdateArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Weapons.
     * @param {WeaponsDeleteManyArgs} args - Arguments to filter Weapons to delete.
     * @example
     * // Delete a few Weapons
     * const { count } = await prisma.weapons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeaponsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeaponsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Weapons
     * const weapons = await prisma.weapons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeaponsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Weapons.
     * @param {WeaponsUpsertArgs} args - Arguments to update or create a Weapons.
     * @example
     * // Update or create a Weapons
     * const weapons = await prisma.weapons.upsert({
     *   create: {
     *     // ... data to create a Weapons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Weapons we want to update
     *   }
     * })
    **/
    upsert<T extends WeaponsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeaponsUpsertArgs<ExtArgs>>
    ): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsCountArgs} args - Arguments to filter Weapons to count.
     * @example
     * // Count the number of Weapons
     * const count = await prisma.weapons.count({
     *   where: {
     *     // ... the filter for the Weapons we want to count
     *   }
     * })
    **/
    count<T extends WeaponsCountArgs>(
      args?: Subset<T, WeaponsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeaponsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeaponsAggregateArgs>(args: Subset<T, WeaponsAggregateArgs>): Prisma.PrismaPromise<GetWeaponsAggregateType<T>>

    /**
     * Group by Weapons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeaponsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeaponsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeaponsGroupByArgs['orderBy'] }
        : { orderBy?: WeaponsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeaponsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeaponsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Weapons model
   */
  readonly fields: WeaponsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Weapons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeaponsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Turtles<T extends Weapons$TurtlesArgs<ExtArgs> = {}>(args?: Subset<T, Weapons$TurtlesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Weapons model
   */ 
  interface WeaponsFieldRefs {
    readonly id: FieldRef<"Weapons", 'Int'>
    readonly name: FieldRef<"Weapons", 'String'>
    readonly dps: FieldRef<"Weapons", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Weapons findUnique
   */
  export type WeaponsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons findUniqueOrThrow
   */
  export type WeaponsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons findFirst
   */
  export type WeaponsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weapons.
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weapons.
     */
    distinct?: WeaponsScalarFieldEnum | WeaponsScalarFieldEnum[]
  }


  /**
   * Weapons findFirstOrThrow
   */
  export type WeaponsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Weapons.
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Weapons.
     */
    distinct?: WeaponsScalarFieldEnum | WeaponsScalarFieldEnum[]
  }


  /**
   * Weapons findMany
   */
  export type WeaponsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * Filter, which Weapons to fetch.
     */
    where?: WeaponsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Weapons to fetch.
     */
    orderBy?: WeaponsOrderByWithRelationInput | WeaponsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Weapons.
     */
    cursor?: WeaponsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Weapons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Weapons.
     */
    skip?: number
    distinct?: WeaponsScalarFieldEnum | WeaponsScalarFieldEnum[]
  }


  /**
   * Weapons create
   */
  export type WeaponsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * The data needed to create a Weapons.
     */
    data: XOR<WeaponsCreateInput, WeaponsUncheckedCreateInput>
  }


  /**
   * Weapons createMany
   */
  export type WeaponsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Weapons.
     */
    data: WeaponsCreateManyInput | WeaponsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Weapons update
   */
  export type WeaponsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * The data needed to update a Weapons.
     */
    data: XOR<WeaponsUpdateInput, WeaponsUncheckedUpdateInput>
    /**
     * Choose, which Weapons to update.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons updateMany
   */
  export type WeaponsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Weapons.
     */
    data: XOR<WeaponsUpdateManyMutationInput, WeaponsUncheckedUpdateManyInput>
    /**
     * Filter which Weapons to update
     */
    where?: WeaponsWhereInput
  }


  /**
   * Weapons upsert
   */
  export type WeaponsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * The filter to search for the Weapons to update in case it exists.
     */
    where: WeaponsWhereUniqueInput
    /**
     * In case the Weapons found by the `where` argument doesn't exist, create a new Weapons with this data.
     */
    create: XOR<WeaponsCreateInput, WeaponsUncheckedCreateInput>
    /**
     * In case the Weapons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeaponsUpdateInput, WeaponsUncheckedUpdateInput>
  }


  /**
   * Weapons delete
   */
  export type WeaponsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
    /**
     * Filter which Weapons to delete.
     */
    where: WeaponsWhereUniqueInput
  }


  /**
   * Weapons deleteMany
   */
  export type WeaponsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Weapons to delete
     */
    where?: WeaponsWhereInput
  }


  /**
   * Weapons.Turtles
   */
  export type Weapons$TurtlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    where?: TurtlesWhereInput
    orderBy?: TurtlesOrderByWithRelationInput | TurtlesOrderByWithRelationInput[]
    cursor?: TurtlesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurtlesScalarFieldEnum | TurtlesScalarFieldEnum[]
  }


  /**
   * Weapons without action
   */
  export type WeaponsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Weapons
     */
    select?: WeaponsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeaponsInclude<ExtArgs> | null
  }



  /**
   * Model Turtles
   */

  export type AggregateTurtles = {
    _count: TurtlesCountAggregateOutputType | null
    _avg: TurtlesAvgAggregateOutputType | null
    _sum: TurtlesSumAggregateOutputType | null
    _min: TurtlesMinAggregateOutputType | null
    _max: TurtlesMaxAggregateOutputType | null
  }

  export type TurtlesAvgAggregateOutputType = {
    id: number | null
    weaponId: number | null
    favoritePizzaId: number | null
  }

  export type TurtlesSumAggregateOutputType = {
    id: number | null
    weaponId: number | null
    favoritePizzaId: number | null
  }

  export type TurtlesMinAggregateOutputType = {
    id: number | null
    name: string | null
    weaponId: number | null
    favoritePizzaId: number | null
    color: string | null
    image: string | null
  }

  export type TurtlesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    weaponId: number | null
    favoritePizzaId: number | null
    color: string | null
    image: string | null
  }

  export type TurtlesCountAggregateOutputType = {
    id: number
    name: number
    weaponId: number
    favoritePizzaId: number
    color: number
    image: number
    _all: number
  }


  export type TurtlesAvgAggregateInputType = {
    id?: true
    weaponId?: true
    favoritePizzaId?: true
  }

  export type TurtlesSumAggregateInputType = {
    id?: true
    weaponId?: true
    favoritePizzaId?: true
  }

  export type TurtlesMinAggregateInputType = {
    id?: true
    name?: true
    weaponId?: true
    favoritePizzaId?: true
    color?: true
    image?: true
  }

  export type TurtlesMaxAggregateInputType = {
    id?: true
    name?: true
    weaponId?: true
    favoritePizzaId?: true
    color?: true
    image?: true
  }

  export type TurtlesCountAggregateInputType = {
    id?: true
    name?: true
    weaponId?: true
    favoritePizzaId?: true
    color?: true
    image?: true
    _all?: true
  }

  export type TurtlesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turtles to aggregate.
     */
    where?: TurtlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turtles to fetch.
     */
    orderBy?: TurtlesOrderByWithRelationInput | TurtlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurtlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turtles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turtles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turtles
    **/
    _count?: true | TurtlesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurtlesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurtlesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurtlesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurtlesMaxAggregateInputType
  }

  export type GetTurtlesAggregateType<T extends TurtlesAggregateArgs> = {
        [P in keyof T & keyof AggregateTurtles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurtles[P]>
      : GetScalarType<T[P], AggregateTurtles[P]>
  }




  export type TurtlesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurtlesWhereInput
    orderBy?: TurtlesOrderByWithAggregationInput | TurtlesOrderByWithAggregationInput[]
    by: TurtlesScalarFieldEnum[] | TurtlesScalarFieldEnum
    having?: TurtlesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurtlesCountAggregateInputType | true
    _avg?: TurtlesAvgAggregateInputType
    _sum?: TurtlesSumAggregateInputType
    _min?: TurtlesMinAggregateInputType
    _max?: TurtlesMaxAggregateInputType
  }

  export type TurtlesGroupByOutputType = {
    id: number
    name: string
    weaponId: number
    favoritePizzaId: number
    color: string
    image: string
    _count: TurtlesCountAggregateOutputType | null
    _avg: TurtlesAvgAggregateOutputType | null
    _sum: TurtlesSumAggregateOutputType | null
    _min: TurtlesMinAggregateOutputType | null
    _max: TurtlesMaxAggregateOutputType | null
  }

  type GetTurtlesGroupByPayload<T extends TurtlesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurtlesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurtlesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurtlesGroupByOutputType[P]>
            : GetScalarType<T[P], TurtlesGroupByOutputType[P]>
        }
      >
    >


  export type TurtlesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    weaponId?: boolean
    favoritePizzaId?: boolean
    color?: boolean
    image?: boolean
    weapon?: boolean | WeaponsDefaultArgs<ExtArgs>
    favoritePizza?: boolean | PizzasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turtles"]>

  export type TurtlesSelectScalar = {
    id?: boolean
    name?: boolean
    weaponId?: boolean
    favoritePizzaId?: boolean
    color?: boolean
    image?: boolean
  }

  export type TurtlesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    weapon?: boolean | WeaponsDefaultArgs<ExtArgs>
    favoritePizza?: boolean | PizzasDefaultArgs<ExtArgs>
  }


  export type $TurtlesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Turtles"
    objects: {
      weapon: Prisma.$WeaponsPayload<ExtArgs>
      favoritePizza: Prisma.$PizzasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      weaponId: number
      favoritePizzaId: number
      color: string
      image: string
    }, ExtArgs["result"]["turtles"]>
    composites: {}
  }


  type TurtlesGetPayload<S extends boolean | null | undefined | TurtlesDefaultArgs> = $Result.GetResult<Prisma.$TurtlesPayload, S>

  type TurtlesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurtlesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TurtlesCountAggregateInputType | true
    }

  export interface TurtlesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turtles'], meta: { name: 'Turtles' } }
    /**
     * Find zero or one Turtles that matches the filter.
     * @param {TurtlesFindUniqueArgs} args - Arguments to find a Turtles
     * @example
     * // Get one Turtles
     * const turtles = await prisma.turtles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TurtlesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TurtlesFindUniqueArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Turtles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TurtlesFindUniqueOrThrowArgs} args - Arguments to find a Turtles
     * @example
     * // Get one Turtles
     * const turtles = await prisma.turtles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TurtlesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurtlesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Turtles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesFindFirstArgs} args - Arguments to find a Turtles
     * @example
     * // Get one Turtles
     * const turtles = await prisma.turtles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TurtlesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TurtlesFindFirstArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Turtles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesFindFirstOrThrowArgs} args - Arguments to find a Turtles
     * @example
     * // Get one Turtles
     * const turtles = await prisma.turtles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TurtlesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TurtlesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Turtles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turtles
     * const turtles = await prisma.turtles.findMany()
     * 
     * // Get first 10 Turtles
     * const turtles = await prisma.turtles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turtlesWithIdOnly = await prisma.turtles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TurtlesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurtlesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Turtles.
     * @param {TurtlesCreateArgs} args - Arguments to create a Turtles.
     * @example
     * // Create one Turtles
     * const Turtles = await prisma.turtles.create({
     *   data: {
     *     // ... data to create a Turtles
     *   }
     * })
     * 
    **/
    create<T extends TurtlesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TurtlesCreateArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Turtles.
     *     @param {TurtlesCreateManyArgs} args - Arguments to create many Turtles.
     *     @example
     *     // Create many Turtles
     *     const turtles = await prisma.turtles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TurtlesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurtlesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Turtles.
     * @param {TurtlesDeleteArgs} args - Arguments to delete one Turtles.
     * @example
     * // Delete one Turtles
     * const Turtles = await prisma.turtles.delete({
     *   where: {
     *     // ... filter to delete one Turtles
     *   }
     * })
     * 
    **/
    delete<T extends TurtlesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TurtlesDeleteArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Turtles.
     * @param {TurtlesUpdateArgs} args - Arguments to update one Turtles.
     * @example
     * // Update one Turtles
     * const turtles = await prisma.turtles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TurtlesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TurtlesUpdateArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Turtles.
     * @param {TurtlesDeleteManyArgs} args - Arguments to filter Turtles to delete.
     * @example
     * // Delete a few Turtles
     * const { count } = await prisma.turtles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TurtlesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TurtlesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turtles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turtles
     * const turtles = await prisma.turtles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TurtlesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TurtlesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turtles.
     * @param {TurtlesUpsertArgs} args - Arguments to update or create a Turtles.
     * @example
     * // Update or create a Turtles
     * const turtles = await prisma.turtles.upsert({
     *   create: {
     *     // ... data to create a Turtles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turtles we want to update
     *   }
     * })
    **/
    upsert<T extends TurtlesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TurtlesUpsertArgs<ExtArgs>>
    ): Prisma__TurtlesClient<$Result.GetResult<Prisma.$TurtlesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Turtles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesCountArgs} args - Arguments to filter Turtles to count.
     * @example
     * // Count the number of Turtles
     * const count = await prisma.turtles.count({
     *   where: {
     *     // ... the filter for the Turtles we want to count
     *   }
     * })
    **/
    count<T extends TurtlesCountArgs>(
      args?: Subset<T, TurtlesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurtlesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turtles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurtlesAggregateArgs>(args: Subset<T, TurtlesAggregateArgs>): Prisma.PrismaPromise<GetTurtlesAggregateType<T>>

    /**
     * Group by Turtles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurtlesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurtlesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurtlesGroupByArgs['orderBy'] }
        : { orderBy?: TurtlesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurtlesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurtlesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turtles model
   */
  readonly fields: TurtlesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turtles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurtlesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    weapon<T extends WeaponsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WeaponsDefaultArgs<ExtArgs>>): Prisma__WeaponsClient<$Result.GetResult<Prisma.$WeaponsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    favoritePizza<T extends PizzasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PizzasDefaultArgs<ExtArgs>>): Prisma__PizzasClient<$Result.GetResult<Prisma.$PizzasPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Turtles model
   */ 
  interface TurtlesFieldRefs {
    readonly id: FieldRef<"Turtles", 'Int'>
    readonly name: FieldRef<"Turtles", 'String'>
    readonly weaponId: FieldRef<"Turtles", 'Int'>
    readonly favoritePizzaId: FieldRef<"Turtles", 'Int'>
    readonly color: FieldRef<"Turtles", 'String'>
    readonly image: FieldRef<"Turtles", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Turtles findUnique
   */
  export type TurtlesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * Filter, which Turtles to fetch.
     */
    where: TurtlesWhereUniqueInput
  }


  /**
   * Turtles findUniqueOrThrow
   */
  export type TurtlesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * Filter, which Turtles to fetch.
     */
    where: TurtlesWhereUniqueInput
  }


  /**
   * Turtles findFirst
   */
  export type TurtlesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * Filter, which Turtles to fetch.
     */
    where?: TurtlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turtles to fetch.
     */
    orderBy?: TurtlesOrderByWithRelationInput | TurtlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turtles.
     */
    cursor?: TurtlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turtles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turtles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turtles.
     */
    distinct?: TurtlesScalarFieldEnum | TurtlesScalarFieldEnum[]
  }


  /**
   * Turtles findFirstOrThrow
   */
  export type TurtlesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * Filter, which Turtles to fetch.
     */
    where?: TurtlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turtles to fetch.
     */
    orderBy?: TurtlesOrderByWithRelationInput | TurtlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turtles.
     */
    cursor?: TurtlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turtles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turtles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turtles.
     */
    distinct?: TurtlesScalarFieldEnum | TurtlesScalarFieldEnum[]
  }


  /**
   * Turtles findMany
   */
  export type TurtlesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * Filter, which Turtles to fetch.
     */
    where?: TurtlesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turtles to fetch.
     */
    orderBy?: TurtlesOrderByWithRelationInput | TurtlesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turtles.
     */
    cursor?: TurtlesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turtles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turtles.
     */
    skip?: number
    distinct?: TurtlesScalarFieldEnum | TurtlesScalarFieldEnum[]
  }


  /**
   * Turtles create
   */
  export type TurtlesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * The data needed to create a Turtles.
     */
    data: XOR<TurtlesCreateInput, TurtlesUncheckedCreateInput>
  }


  /**
   * Turtles createMany
   */
  export type TurtlesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Turtles.
     */
    data: TurtlesCreateManyInput | TurtlesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Turtles update
   */
  export type TurtlesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * The data needed to update a Turtles.
     */
    data: XOR<TurtlesUpdateInput, TurtlesUncheckedUpdateInput>
    /**
     * Choose, which Turtles to update.
     */
    where: TurtlesWhereUniqueInput
  }


  /**
   * Turtles updateMany
   */
  export type TurtlesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turtles.
     */
    data: XOR<TurtlesUpdateManyMutationInput, TurtlesUncheckedUpdateManyInput>
    /**
     * Filter which Turtles to update
     */
    where?: TurtlesWhereInput
  }


  /**
   * Turtles upsert
   */
  export type TurtlesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * The filter to search for the Turtles to update in case it exists.
     */
    where: TurtlesWhereUniqueInput
    /**
     * In case the Turtles found by the `where` argument doesn't exist, create a new Turtles with this data.
     */
    create: XOR<TurtlesCreateInput, TurtlesUncheckedCreateInput>
    /**
     * In case the Turtles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurtlesUpdateInput, TurtlesUncheckedUpdateInput>
  }


  /**
   * Turtles delete
   */
  export type TurtlesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
    /**
     * Filter which Turtles to delete.
     */
    where: TurtlesWhereUniqueInput
  }


  /**
   * Turtles deleteMany
   */
  export type TurtlesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turtles to delete
     */
    where?: TurtlesWhereInput
  }


  /**
   * Turtles without action
   */
  export type TurtlesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turtles
     */
    select?: TurtlesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TurtlesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PizzasScalarFieldEnum: {
    id: 'id',
    name: 'name',
    calories: 'calories',
    description: 'description'
  };

  export type PizzasScalarFieldEnum = (typeof PizzasScalarFieldEnum)[keyof typeof PizzasScalarFieldEnum]


  export const WeaponsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    dps: 'dps'
  };

  export type WeaponsScalarFieldEnum = (typeof WeaponsScalarFieldEnum)[keyof typeof WeaponsScalarFieldEnum]


  export const TurtlesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    weaponId: 'weaponId',
    favoritePizzaId: 'favoritePizzaId',
    color: 'color',
    image: 'image'
  };

  export type TurtlesScalarFieldEnum = (typeof TurtlesScalarFieldEnum)[keyof typeof TurtlesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PizzasWhereInput = {
    AND?: PizzasWhereInput | PizzasWhereInput[]
    OR?: PizzasWhereInput[]
    NOT?: PizzasWhereInput | PizzasWhereInput[]
    id?: IntFilter<"Pizzas"> | number
    name?: StringFilter<"Pizzas"> | string
    calories?: IntFilter<"Pizzas"> | number
    description?: StringNullableFilter<"Pizzas"> | string | null
    Turtles?: TurtlesListRelationFilter
  }

  export type PizzasOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    description?: SortOrderInput | SortOrder
    Turtles?: TurtlesOrderByRelationAggregateInput
  }

  export type PizzasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: PizzasWhereInput | PizzasWhereInput[]
    OR?: PizzasWhereInput[]
    NOT?: PizzasWhereInput | PizzasWhereInput[]
    calories?: IntFilter<"Pizzas"> | number
    description?: StringNullableFilter<"Pizzas"> | string | null
    Turtles?: TurtlesListRelationFilter
  }, "id" | "name">

  export type PizzasOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: PizzasCountOrderByAggregateInput
    _avg?: PizzasAvgOrderByAggregateInput
    _max?: PizzasMaxOrderByAggregateInput
    _min?: PizzasMinOrderByAggregateInput
    _sum?: PizzasSumOrderByAggregateInput
  }

  export type PizzasScalarWhereWithAggregatesInput = {
    AND?: PizzasScalarWhereWithAggregatesInput | PizzasScalarWhereWithAggregatesInput[]
    OR?: PizzasScalarWhereWithAggregatesInput[]
    NOT?: PizzasScalarWhereWithAggregatesInput | PizzasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pizzas"> | number
    name?: StringWithAggregatesFilter<"Pizzas"> | string
    calories?: IntWithAggregatesFilter<"Pizzas"> | number
    description?: StringNullableWithAggregatesFilter<"Pizzas"> | string | null
  }

  export type WeaponsWhereInput = {
    AND?: WeaponsWhereInput | WeaponsWhereInput[]
    OR?: WeaponsWhereInput[]
    NOT?: WeaponsWhereInput | WeaponsWhereInput[]
    id?: IntFilter<"Weapons"> | number
    name?: StringFilter<"Weapons"> | string
    dps?: IntFilter<"Weapons"> | number
    Turtles?: TurtlesListRelationFilter
  }

  export type WeaponsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    dps?: SortOrder
    Turtles?: TurtlesOrderByRelationAggregateInput
  }

  export type WeaponsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: WeaponsWhereInput | WeaponsWhereInput[]
    OR?: WeaponsWhereInput[]
    NOT?: WeaponsWhereInput | WeaponsWhereInput[]
    dps?: IntFilter<"Weapons"> | number
    Turtles?: TurtlesListRelationFilter
  }, "id" | "name">

  export type WeaponsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    dps?: SortOrder
    _count?: WeaponsCountOrderByAggregateInput
    _avg?: WeaponsAvgOrderByAggregateInput
    _max?: WeaponsMaxOrderByAggregateInput
    _min?: WeaponsMinOrderByAggregateInput
    _sum?: WeaponsSumOrderByAggregateInput
  }

  export type WeaponsScalarWhereWithAggregatesInput = {
    AND?: WeaponsScalarWhereWithAggregatesInput | WeaponsScalarWhereWithAggregatesInput[]
    OR?: WeaponsScalarWhereWithAggregatesInput[]
    NOT?: WeaponsScalarWhereWithAggregatesInput | WeaponsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Weapons"> | number
    name?: StringWithAggregatesFilter<"Weapons"> | string
    dps?: IntWithAggregatesFilter<"Weapons"> | number
  }

  export type TurtlesWhereInput = {
    AND?: TurtlesWhereInput | TurtlesWhereInput[]
    OR?: TurtlesWhereInput[]
    NOT?: TurtlesWhereInput | TurtlesWhereInput[]
    id?: IntFilter<"Turtles"> | number
    name?: StringFilter<"Turtles"> | string
    weaponId?: IntFilter<"Turtles"> | number
    favoritePizzaId?: IntFilter<"Turtles"> | number
    color?: StringFilter<"Turtles"> | string
    image?: StringFilter<"Turtles"> | string
    weapon?: XOR<WeaponsRelationFilter, WeaponsWhereInput>
    favoritePizza?: XOR<PizzasRelationFilter, PizzasWhereInput>
  }

  export type TurtlesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
    color?: SortOrder
    image?: SortOrder
    weapon?: WeaponsOrderByWithRelationInput
    favoritePizza?: PizzasOrderByWithRelationInput
  }

  export type TurtlesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: TurtlesWhereInput | TurtlesWhereInput[]
    OR?: TurtlesWhereInput[]
    NOT?: TurtlesWhereInput | TurtlesWhereInput[]
    weaponId?: IntFilter<"Turtles"> | number
    favoritePizzaId?: IntFilter<"Turtles"> | number
    color?: StringFilter<"Turtles"> | string
    image?: StringFilter<"Turtles"> | string
    weapon?: XOR<WeaponsRelationFilter, WeaponsWhereInput>
    favoritePizza?: XOR<PizzasRelationFilter, PizzasWhereInput>
  }, "id" | "name">

  export type TurtlesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
    color?: SortOrder
    image?: SortOrder
    _count?: TurtlesCountOrderByAggregateInput
    _avg?: TurtlesAvgOrderByAggregateInput
    _max?: TurtlesMaxOrderByAggregateInput
    _min?: TurtlesMinOrderByAggregateInput
    _sum?: TurtlesSumOrderByAggregateInput
  }

  export type TurtlesScalarWhereWithAggregatesInput = {
    AND?: TurtlesScalarWhereWithAggregatesInput | TurtlesScalarWhereWithAggregatesInput[]
    OR?: TurtlesScalarWhereWithAggregatesInput[]
    NOT?: TurtlesScalarWhereWithAggregatesInput | TurtlesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Turtles"> | number
    name?: StringWithAggregatesFilter<"Turtles"> | string
    weaponId?: IntWithAggregatesFilter<"Turtles"> | number
    favoritePizzaId?: IntWithAggregatesFilter<"Turtles"> | number
    color?: StringWithAggregatesFilter<"Turtles"> | string
    image?: StringWithAggregatesFilter<"Turtles"> | string
  }

  export type PizzasCreateInput = {
    name: string
    calories: number
    description?: string | null
    Turtles?: TurtlesCreateNestedManyWithoutFavoritePizzaInput
  }

  export type PizzasUncheckedCreateInput = {
    id?: number
    name: string
    calories: number
    description?: string | null
    Turtles?: TurtlesUncheckedCreateNestedManyWithoutFavoritePizzaInput
  }

  export type PizzasUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    Turtles?: TurtlesUpdateManyWithoutFavoritePizzaNestedInput
  }

  export type PizzasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    Turtles?: TurtlesUncheckedUpdateManyWithoutFavoritePizzaNestedInput
  }

  export type PizzasCreateManyInput = {
    id?: number
    name: string
    calories: number
    description?: string | null
  }

  export type PizzasUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PizzasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WeaponsCreateInput = {
    name: string
    dps: number
    Turtles?: TurtlesCreateNestedManyWithoutWeaponInput
  }

  export type WeaponsUncheckedCreateInput = {
    id?: number
    name: string
    dps: number
    Turtles?: TurtlesUncheckedCreateNestedManyWithoutWeaponInput
  }

  export type WeaponsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    dps?: IntFieldUpdateOperationsInput | number
    Turtles?: TurtlesUpdateManyWithoutWeaponNestedInput
  }

  export type WeaponsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dps?: IntFieldUpdateOperationsInput | number
    Turtles?: TurtlesUncheckedUpdateManyWithoutWeaponNestedInput
  }

  export type WeaponsCreateManyInput = {
    id?: number
    name: string
    dps: number
  }

  export type WeaponsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    dps?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dps?: IntFieldUpdateOperationsInput | number
  }

  export type TurtlesCreateInput = {
    name: string
    color: string
    image: string
    weapon: WeaponsCreateNestedOneWithoutTurtlesInput
    favoritePizza: PizzasCreateNestedOneWithoutTurtlesInput
  }

  export type TurtlesUncheckedCreateInput = {
    id?: number
    name: string
    weaponId: number
    favoritePizzaId: number
    color: string
    image: string
  }

  export type TurtlesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    weapon?: WeaponsUpdateOneRequiredWithoutTurtlesNestedInput
    favoritePizza?: PizzasUpdateOneRequiredWithoutTurtlesNestedInput
  }

  export type TurtlesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weaponId?: IntFieldUpdateOperationsInput | number
    favoritePizzaId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type TurtlesCreateManyInput = {
    id?: number
    name: string
    weaponId: number
    favoritePizzaId: number
    color: string
    image: string
  }

  export type TurtlesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type TurtlesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weaponId?: IntFieldUpdateOperationsInput | number
    favoritePizzaId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TurtlesListRelationFilter = {
    every?: TurtlesWhereInput
    some?: TurtlesWhereInput
    none?: TurtlesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TurtlesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PizzasCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    description?: SortOrder
  }

  export type PizzasAvgOrderByAggregateInput = {
    id?: SortOrder
    calories?: SortOrder
  }

  export type PizzasMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    description?: SortOrder
  }

  export type PizzasMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    calories?: SortOrder
    description?: SortOrder
  }

  export type PizzasSumOrderByAggregateInput = {
    id?: SortOrder
    calories?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type WeaponsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dps?: SortOrder
  }

  export type WeaponsAvgOrderByAggregateInput = {
    id?: SortOrder
    dps?: SortOrder
  }

  export type WeaponsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dps?: SortOrder
  }

  export type WeaponsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    dps?: SortOrder
  }

  export type WeaponsSumOrderByAggregateInput = {
    id?: SortOrder
    dps?: SortOrder
  }

  export type WeaponsRelationFilter = {
    is?: WeaponsWhereInput
    isNot?: WeaponsWhereInput
  }

  export type PizzasRelationFilter = {
    is?: PizzasWhereInput
    isNot?: PizzasWhereInput
  }

  export type TurtlesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
    color?: SortOrder
    image?: SortOrder
  }

  export type TurtlesAvgOrderByAggregateInput = {
    id?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
  }

  export type TurtlesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
    color?: SortOrder
    image?: SortOrder
  }

  export type TurtlesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
    color?: SortOrder
    image?: SortOrder
  }

  export type TurtlesSumOrderByAggregateInput = {
    id?: SortOrder
    weaponId?: SortOrder
    favoritePizzaId?: SortOrder
  }

  export type TurtlesCreateNestedManyWithoutFavoritePizzaInput = {
    create?: XOR<TurtlesCreateWithoutFavoritePizzaInput, TurtlesUncheckedCreateWithoutFavoritePizzaInput> | TurtlesCreateWithoutFavoritePizzaInput[] | TurtlesUncheckedCreateWithoutFavoritePizzaInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutFavoritePizzaInput | TurtlesCreateOrConnectWithoutFavoritePizzaInput[]
    createMany?: TurtlesCreateManyFavoritePizzaInputEnvelope
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
  }

  export type TurtlesUncheckedCreateNestedManyWithoutFavoritePizzaInput = {
    create?: XOR<TurtlesCreateWithoutFavoritePizzaInput, TurtlesUncheckedCreateWithoutFavoritePizzaInput> | TurtlesCreateWithoutFavoritePizzaInput[] | TurtlesUncheckedCreateWithoutFavoritePizzaInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutFavoritePizzaInput | TurtlesCreateOrConnectWithoutFavoritePizzaInput[]
    createMany?: TurtlesCreateManyFavoritePizzaInputEnvelope
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TurtlesUpdateManyWithoutFavoritePizzaNestedInput = {
    create?: XOR<TurtlesCreateWithoutFavoritePizzaInput, TurtlesUncheckedCreateWithoutFavoritePizzaInput> | TurtlesCreateWithoutFavoritePizzaInput[] | TurtlesUncheckedCreateWithoutFavoritePizzaInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutFavoritePizzaInput | TurtlesCreateOrConnectWithoutFavoritePizzaInput[]
    upsert?: TurtlesUpsertWithWhereUniqueWithoutFavoritePizzaInput | TurtlesUpsertWithWhereUniqueWithoutFavoritePizzaInput[]
    createMany?: TurtlesCreateManyFavoritePizzaInputEnvelope
    set?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    disconnect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    delete?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    update?: TurtlesUpdateWithWhereUniqueWithoutFavoritePizzaInput | TurtlesUpdateWithWhereUniqueWithoutFavoritePizzaInput[]
    updateMany?: TurtlesUpdateManyWithWhereWithoutFavoritePizzaInput | TurtlesUpdateManyWithWhereWithoutFavoritePizzaInput[]
    deleteMany?: TurtlesScalarWhereInput | TurtlesScalarWhereInput[]
  }

  export type TurtlesUncheckedUpdateManyWithoutFavoritePizzaNestedInput = {
    create?: XOR<TurtlesCreateWithoutFavoritePizzaInput, TurtlesUncheckedCreateWithoutFavoritePizzaInput> | TurtlesCreateWithoutFavoritePizzaInput[] | TurtlesUncheckedCreateWithoutFavoritePizzaInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutFavoritePizzaInput | TurtlesCreateOrConnectWithoutFavoritePizzaInput[]
    upsert?: TurtlesUpsertWithWhereUniqueWithoutFavoritePizzaInput | TurtlesUpsertWithWhereUniqueWithoutFavoritePizzaInput[]
    createMany?: TurtlesCreateManyFavoritePizzaInputEnvelope
    set?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    disconnect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    delete?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    update?: TurtlesUpdateWithWhereUniqueWithoutFavoritePizzaInput | TurtlesUpdateWithWhereUniqueWithoutFavoritePizzaInput[]
    updateMany?: TurtlesUpdateManyWithWhereWithoutFavoritePizzaInput | TurtlesUpdateManyWithWhereWithoutFavoritePizzaInput[]
    deleteMany?: TurtlesScalarWhereInput | TurtlesScalarWhereInput[]
  }

  export type TurtlesCreateNestedManyWithoutWeaponInput = {
    create?: XOR<TurtlesCreateWithoutWeaponInput, TurtlesUncheckedCreateWithoutWeaponInput> | TurtlesCreateWithoutWeaponInput[] | TurtlesUncheckedCreateWithoutWeaponInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutWeaponInput | TurtlesCreateOrConnectWithoutWeaponInput[]
    createMany?: TurtlesCreateManyWeaponInputEnvelope
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
  }

  export type TurtlesUncheckedCreateNestedManyWithoutWeaponInput = {
    create?: XOR<TurtlesCreateWithoutWeaponInput, TurtlesUncheckedCreateWithoutWeaponInput> | TurtlesCreateWithoutWeaponInput[] | TurtlesUncheckedCreateWithoutWeaponInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutWeaponInput | TurtlesCreateOrConnectWithoutWeaponInput[]
    createMany?: TurtlesCreateManyWeaponInputEnvelope
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
  }

  export type TurtlesUpdateManyWithoutWeaponNestedInput = {
    create?: XOR<TurtlesCreateWithoutWeaponInput, TurtlesUncheckedCreateWithoutWeaponInput> | TurtlesCreateWithoutWeaponInput[] | TurtlesUncheckedCreateWithoutWeaponInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutWeaponInput | TurtlesCreateOrConnectWithoutWeaponInput[]
    upsert?: TurtlesUpsertWithWhereUniqueWithoutWeaponInput | TurtlesUpsertWithWhereUniqueWithoutWeaponInput[]
    createMany?: TurtlesCreateManyWeaponInputEnvelope
    set?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    disconnect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    delete?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    update?: TurtlesUpdateWithWhereUniqueWithoutWeaponInput | TurtlesUpdateWithWhereUniqueWithoutWeaponInput[]
    updateMany?: TurtlesUpdateManyWithWhereWithoutWeaponInput | TurtlesUpdateManyWithWhereWithoutWeaponInput[]
    deleteMany?: TurtlesScalarWhereInput | TurtlesScalarWhereInput[]
  }

  export type TurtlesUncheckedUpdateManyWithoutWeaponNestedInput = {
    create?: XOR<TurtlesCreateWithoutWeaponInput, TurtlesUncheckedCreateWithoutWeaponInput> | TurtlesCreateWithoutWeaponInput[] | TurtlesUncheckedCreateWithoutWeaponInput[]
    connectOrCreate?: TurtlesCreateOrConnectWithoutWeaponInput | TurtlesCreateOrConnectWithoutWeaponInput[]
    upsert?: TurtlesUpsertWithWhereUniqueWithoutWeaponInput | TurtlesUpsertWithWhereUniqueWithoutWeaponInput[]
    createMany?: TurtlesCreateManyWeaponInputEnvelope
    set?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    disconnect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    delete?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    connect?: TurtlesWhereUniqueInput | TurtlesWhereUniqueInput[]
    update?: TurtlesUpdateWithWhereUniqueWithoutWeaponInput | TurtlesUpdateWithWhereUniqueWithoutWeaponInput[]
    updateMany?: TurtlesUpdateManyWithWhereWithoutWeaponInput | TurtlesUpdateManyWithWhereWithoutWeaponInput[]
    deleteMany?: TurtlesScalarWhereInput | TurtlesScalarWhereInput[]
  }

  export type WeaponsCreateNestedOneWithoutTurtlesInput = {
    create?: XOR<WeaponsCreateWithoutTurtlesInput, WeaponsUncheckedCreateWithoutTurtlesInput>
    connectOrCreate?: WeaponsCreateOrConnectWithoutTurtlesInput
    connect?: WeaponsWhereUniqueInput
  }

  export type PizzasCreateNestedOneWithoutTurtlesInput = {
    create?: XOR<PizzasCreateWithoutTurtlesInput, PizzasUncheckedCreateWithoutTurtlesInput>
    connectOrCreate?: PizzasCreateOrConnectWithoutTurtlesInput
    connect?: PizzasWhereUniqueInput
  }

  export type WeaponsUpdateOneRequiredWithoutTurtlesNestedInput = {
    create?: XOR<WeaponsCreateWithoutTurtlesInput, WeaponsUncheckedCreateWithoutTurtlesInput>
    connectOrCreate?: WeaponsCreateOrConnectWithoutTurtlesInput
    upsert?: WeaponsUpsertWithoutTurtlesInput
    connect?: WeaponsWhereUniqueInput
    update?: XOR<XOR<WeaponsUpdateToOneWithWhereWithoutTurtlesInput, WeaponsUpdateWithoutTurtlesInput>, WeaponsUncheckedUpdateWithoutTurtlesInput>
  }

  export type PizzasUpdateOneRequiredWithoutTurtlesNestedInput = {
    create?: XOR<PizzasCreateWithoutTurtlesInput, PizzasUncheckedCreateWithoutTurtlesInput>
    connectOrCreate?: PizzasCreateOrConnectWithoutTurtlesInput
    upsert?: PizzasUpsertWithoutTurtlesInput
    connect?: PizzasWhereUniqueInput
    update?: XOR<XOR<PizzasUpdateToOneWithWhereWithoutTurtlesInput, PizzasUpdateWithoutTurtlesInput>, PizzasUncheckedUpdateWithoutTurtlesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TurtlesCreateWithoutFavoritePizzaInput = {
    name: string
    color: string
    image: string
    weapon: WeaponsCreateNestedOneWithoutTurtlesInput
  }

  export type TurtlesUncheckedCreateWithoutFavoritePizzaInput = {
    id?: number
    name: string
    weaponId: number
    color: string
    image: string
  }

  export type TurtlesCreateOrConnectWithoutFavoritePizzaInput = {
    where: TurtlesWhereUniqueInput
    create: XOR<TurtlesCreateWithoutFavoritePizzaInput, TurtlesUncheckedCreateWithoutFavoritePizzaInput>
  }

  export type TurtlesCreateManyFavoritePizzaInputEnvelope = {
    data: TurtlesCreateManyFavoritePizzaInput | TurtlesCreateManyFavoritePizzaInput[]
    skipDuplicates?: boolean
  }

  export type TurtlesUpsertWithWhereUniqueWithoutFavoritePizzaInput = {
    where: TurtlesWhereUniqueInput
    update: XOR<TurtlesUpdateWithoutFavoritePizzaInput, TurtlesUncheckedUpdateWithoutFavoritePizzaInput>
    create: XOR<TurtlesCreateWithoutFavoritePizzaInput, TurtlesUncheckedCreateWithoutFavoritePizzaInput>
  }

  export type TurtlesUpdateWithWhereUniqueWithoutFavoritePizzaInput = {
    where: TurtlesWhereUniqueInput
    data: XOR<TurtlesUpdateWithoutFavoritePizzaInput, TurtlesUncheckedUpdateWithoutFavoritePizzaInput>
  }

  export type TurtlesUpdateManyWithWhereWithoutFavoritePizzaInput = {
    where: TurtlesScalarWhereInput
    data: XOR<TurtlesUpdateManyMutationInput, TurtlesUncheckedUpdateManyWithoutFavoritePizzaInput>
  }

  export type TurtlesScalarWhereInput = {
    AND?: TurtlesScalarWhereInput | TurtlesScalarWhereInput[]
    OR?: TurtlesScalarWhereInput[]
    NOT?: TurtlesScalarWhereInput | TurtlesScalarWhereInput[]
    id?: IntFilter<"Turtles"> | number
    name?: StringFilter<"Turtles"> | string
    weaponId?: IntFilter<"Turtles"> | number
    favoritePizzaId?: IntFilter<"Turtles"> | number
    color?: StringFilter<"Turtles"> | string
    image?: StringFilter<"Turtles"> | string
  }

  export type TurtlesCreateWithoutWeaponInput = {
    name: string
    color: string
    image: string
    favoritePizza: PizzasCreateNestedOneWithoutTurtlesInput
  }

  export type TurtlesUncheckedCreateWithoutWeaponInput = {
    id?: number
    name: string
    favoritePizzaId: number
    color: string
    image: string
  }

  export type TurtlesCreateOrConnectWithoutWeaponInput = {
    where: TurtlesWhereUniqueInput
    create: XOR<TurtlesCreateWithoutWeaponInput, TurtlesUncheckedCreateWithoutWeaponInput>
  }

  export type TurtlesCreateManyWeaponInputEnvelope = {
    data: TurtlesCreateManyWeaponInput | TurtlesCreateManyWeaponInput[]
    skipDuplicates?: boolean
  }

  export type TurtlesUpsertWithWhereUniqueWithoutWeaponInput = {
    where: TurtlesWhereUniqueInput
    update: XOR<TurtlesUpdateWithoutWeaponInput, TurtlesUncheckedUpdateWithoutWeaponInput>
    create: XOR<TurtlesCreateWithoutWeaponInput, TurtlesUncheckedCreateWithoutWeaponInput>
  }

  export type TurtlesUpdateWithWhereUniqueWithoutWeaponInput = {
    where: TurtlesWhereUniqueInput
    data: XOR<TurtlesUpdateWithoutWeaponInput, TurtlesUncheckedUpdateWithoutWeaponInput>
  }

  export type TurtlesUpdateManyWithWhereWithoutWeaponInput = {
    where: TurtlesScalarWhereInput
    data: XOR<TurtlesUpdateManyMutationInput, TurtlesUncheckedUpdateManyWithoutWeaponInput>
  }

  export type WeaponsCreateWithoutTurtlesInput = {
    name: string
    dps: number
  }

  export type WeaponsUncheckedCreateWithoutTurtlesInput = {
    id?: number
    name: string
    dps: number
  }

  export type WeaponsCreateOrConnectWithoutTurtlesInput = {
    where: WeaponsWhereUniqueInput
    create: XOR<WeaponsCreateWithoutTurtlesInput, WeaponsUncheckedCreateWithoutTurtlesInput>
  }

  export type PizzasCreateWithoutTurtlesInput = {
    name: string
    calories: number
    description?: string | null
  }

  export type PizzasUncheckedCreateWithoutTurtlesInput = {
    id?: number
    name: string
    calories: number
    description?: string | null
  }

  export type PizzasCreateOrConnectWithoutTurtlesInput = {
    where: PizzasWhereUniqueInput
    create: XOR<PizzasCreateWithoutTurtlesInput, PizzasUncheckedCreateWithoutTurtlesInput>
  }

  export type WeaponsUpsertWithoutTurtlesInput = {
    update: XOR<WeaponsUpdateWithoutTurtlesInput, WeaponsUncheckedUpdateWithoutTurtlesInput>
    create: XOR<WeaponsCreateWithoutTurtlesInput, WeaponsUncheckedCreateWithoutTurtlesInput>
    where?: WeaponsWhereInput
  }

  export type WeaponsUpdateToOneWithWhereWithoutTurtlesInput = {
    where?: WeaponsWhereInput
    data: XOR<WeaponsUpdateWithoutTurtlesInput, WeaponsUncheckedUpdateWithoutTurtlesInput>
  }

  export type WeaponsUpdateWithoutTurtlesInput = {
    name?: StringFieldUpdateOperationsInput | string
    dps?: IntFieldUpdateOperationsInput | number
  }

  export type WeaponsUncheckedUpdateWithoutTurtlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dps?: IntFieldUpdateOperationsInput | number
  }

  export type PizzasUpsertWithoutTurtlesInput = {
    update: XOR<PizzasUpdateWithoutTurtlesInput, PizzasUncheckedUpdateWithoutTurtlesInput>
    create: XOR<PizzasCreateWithoutTurtlesInput, PizzasUncheckedCreateWithoutTurtlesInput>
    where?: PizzasWhereInput
  }

  export type PizzasUpdateToOneWithWhereWithoutTurtlesInput = {
    where?: PizzasWhereInput
    data: XOR<PizzasUpdateWithoutTurtlesInput, PizzasUncheckedUpdateWithoutTurtlesInput>
  }

  export type PizzasUpdateWithoutTurtlesInput = {
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PizzasUncheckedUpdateWithoutTurtlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    calories?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurtlesCreateManyFavoritePizzaInput = {
    id?: number
    name: string
    weaponId: number
    color: string
    image: string
  }

  export type TurtlesUpdateWithoutFavoritePizzaInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    weapon?: WeaponsUpdateOneRequiredWithoutTurtlesNestedInput
  }

  export type TurtlesUncheckedUpdateWithoutFavoritePizzaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weaponId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type TurtlesUncheckedUpdateManyWithoutFavoritePizzaInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weaponId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type TurtlesCreateManyWeaponInput = {
    id?: number
    name: string
    favoritePizzaId: number
    color: string
    image: string
  }

  export type TurtlesUpdateWithoutWeaponInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    favoritePizza?: PizzasUpdateOneRequiredWithoutTurtlesNestedInput
  }

  export type TurtlesUncheckedUpdateWithoutWeaponInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    favoritePizzaId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type TurtlesUncheckedUpdateManyWithoutWeaponInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    favoritePizzaId?: IntFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PizzasCountOutputTypeDefaultArgs instead
     */
    export type PizzasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PizzasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeaponsCountOutputTypeDefaultArgs instead
     */
    export type WeaponsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeaponsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PizzasDefaultArgs instead
     */
    export type PizzasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PizzasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeaponsDefaultArgs instead
     */
    export type WeaponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WeaponsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurtlesDefaultArgs instead
     */
    export type TurtlesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurtlesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}